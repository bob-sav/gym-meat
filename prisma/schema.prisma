// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?         @db.Text
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  GymAdmin      GymAdmin[]
  ButcherAdmin  ButcherAdmin?
  GymSettlement GymSettlement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Add/adjust in prisma/schema.prisma

// prisma/schema.prisma (product section)

enum Species {
  BEEF
  CHICKEN
  TURKEY
  DUCK
  GOOSE
  SALMON
  OTHER
}

enum Part {
  // Beef
  SIRLOIN
  RIBEYE
  TENDERLOIN
  RUMP
  SHORT_LOIN
  // Poultry
  BREAST
  THIGH
  WHOLE_BIRD
  // Fish
  FILLET
  // Generic
  OTHER
}

model Product {
  id          String   @id @default(cuid())
  species     Species
  part        Part?
  name        String
  description String?  @db.Text
  imageUrl    String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  variants     ProductVariant[]
  optionGroups ProductOptionGroup[]

  // back-relation so OrderLine.product compiles
  orderLines OrderLine[]

  @@index([species])
  @@index([name])
}

model ProductVariant {
  id         String  @id @default(cuid())
  productId  String
  sizeGrams  Int
  priceCents Int
  sku        String? @unique
  inStock    Boolean @default(true)
  sortOrder  Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum OptionGroupType {
  SINGLE
  MULTIPLE
}

model ProductOptionGroup {
  id        String          @id @default(cuid())
  productId String
  name      String
  type      OptionGroupType
  required  Boolean         @default(false)
  minSelect Int?
  maxSelect Int?
  sortOrder Int             @default(0)

  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  options ProductOption[]

  @@index([productId])
}

model ProductOption {
  id              String  @id @default(cuid())
  groupId         String
  label           String
  priceDeltaCents Int     @default(0)
  isDefault       Boolean @default(false)
  sortOrder       Int     @default(0)

  group ProductOptionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}

enum OrderState {
  PENDING
  PREPARING
  READY_FOR_DELIVERY
  IN_TRANSIT
  AT_GYM
  PICKED_UP
  CANCELLED
}

enum LineState {
  PENDING
  PREPARING
  READY
  SENT
}

model Order {
  id            String     @id @default(cuid())
  userId        String
  shortCode     String     @unique
  state         OrderState @default(PENDING)
  pickupGymId   String?
  pickupGymName String?
  pickupWhen    DateTime?
  subtotalCents Int        @default(0)
  totalCents    Int        @default(0)
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())

  user  User        @relation(fields: [userId], references: [id])
  lines OrderLine[]

  gymSettlementId String?
  gymSettlement   GymSettlement? @relation(fields: [gymSettlementId], references: [id])

  pickupGym Gym? @relation("GymOrders", fields: [pickupGymId], references: [id])

  @@index([state])
  @@index([createdAt])
  @@index([pickupGymId])
  @@index([gymSettlementId])
}

model OrderLine {
  id               String  @id @default(cuid())
  orderId          String
  productId        String
  productName      String
  species          Species
  part             Part?
  variantSizeGrams Int?
  unitLabel        String?
  basePriceCents   Int
  optionsJson      Json    @default("[]")
  qty              Int

  lineState LineState @default(PENDING)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([lineState])
}

// ---------- Gym & GymAdmin ----------
model Gym {
  id        String   @id @default(cuid())
  name      String
  address   String?
  notes     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  admins        GymAdmin[]
  // Backref to orders (via Order.pickupGymId)
  orders        Order[]         @relation("GymOrders")
  GymSettlement GymSettlement[]

  @@index([active])
  @@index([name])
}

model GymAdmin {
  id        String   @id @default(cuid())
  gymId     String
  userId    String
  createdAt DateTime @default(now())

  gym  Gym  @relation(fields: [gymId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gymId, userId])
  @@index([userId])
}

model ButcherAdmin {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GymSettlement {
  id              String   @id @default(cuid())
  gymId           String
  createdAt       DateTime @default(now())
  createdByUserId String
  orderCount      Int
  totalCents      Int      @default(0)

  gym       Gym     @relation(fields: [gymId], references: [id], onDelete: Cascade)
  createdBy User    @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([gymId, createdAt])
}
